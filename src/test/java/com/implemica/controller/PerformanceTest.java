package com.implemica.controller;

import com.implemica.controller.util.TestFxBaseBuilder;
import org.junit.jupiter.api.Test;

public class PerformanceTest extends TestFxBaseBuilder {

   @Test
   void simpleOperationTests() {
      doTest("2+", "2 + ", "2");
      doTest("3+++++", "3 + ", "3");
      doTest("5-----", "5 - ", "5");
      doTest("8×××××", "8 × ", "8");
      doTest("12÷÷÷÷÷", "12 ÷ ", "12");
      doTest("9÷×-+-×÷×-++-×+", "9 + ", "9");
      doTest("52--+÷×-+-÷×-+-÷", "52 ÷ ", "52");
      doTest("12+×÷×-+-×÷÷×÷××÷-+-×÷", "12 ÷ ", "12");
      doTest("2++++=", "", "4");
      doTest("4----=", "", "0");
      doTest("8××××=", "", "64");
      doTest("100÷÷÷÷÷=", "", "1");
   }

   @Test
   void plusOperationTest() {
      doTest("2+2=", "", "4");
      doTest("7+3=", "", "10");
      doTest("1+8=", "", "9");
      doTest("5+6=", "", "11");
      doTest("3+9=", "", "12");

      doTest("0+0=", "", "0");
      doTest("1+0=", "", "1");
      doTest("8+0=", "", "8");
      doTest("0+5=", "", "5");
      doTest("0+3=", "", "3");

      doTest("2+5", "2 + ", "5");
      doTest("5+3", "5 + ", "3");
      doTest("2+3", "2 + ", "3");
      doTest("2+8", "2 + ", "8");
      doTest("1+2", "1 + ", "2");

      doTest("0+0", "0 + ", "0");
      doTest("1+0", "1 + ", "0");
      doTest("5+0", "5 + ", "0");
      doTest("0+2", "0 + ", "2");
      doTest("0+6", "0 + ", "6");

      doTest("0+", "0 + ", "0");
      doTest("2+", "2 + ", "2");
      doTest("3+", "3 + ", "3");
      doTest("9+", "9 + ", "9");
      doTest("8+", "8 + ", "8");

      doTest("+1", "0 + ", "1");
      doTest("+5", "0 + ", "5");
      doTest("+9", "0 + ", "9");
      doTest("+7", "0 + ", "7");
      doTest("+3", "0 + ", "3");

      doTest("+", "0 + ", "0");

      doTest("1+=", "", "2");
      doTest("5+=", "", "10");
      doTest("3+=", "", "6");
      doTest("2+=", "", "4");
      doTest("7+=", "", "14");

      doTest("+7=", "", "7");
      doTest("+2=", "", "2");
      doTest("+5=", "", "5");
      doTest("+9=", "", "9");
      doTest("+1=", "", "1");

      doTest("1+5+", "1 + 5 + ", "6");
      doTest("2+9+", "2 + 9 + ", "11");
      doTest("3+8+", "3 + 8 + ", "11");
      doTest("4+7+", "4 + 7 + ", "11");
      doTest("5+6+", "5 + 6 + ", "11");

      doTest("2+3+=", "", "10");
      doTest("9+2+=", "", "22");
      doTest("5+7+=", "", "24");
      doTest("6+4+=", "", "20");
      doTest("7+6+=", "", "26");

      doTest("1+1+2=", "", "4");
      doTest("6+2+2=", "", "10");
      doTest("1+7+3=", "", "11");
      doTest("0+2+8=", "", "10");
      doTest("5+9+3=", "", "17");

      doTest("2+4=+5", "6 + ", "5");
      doTest("3+3=+7", "6 + ", "7");
      doTest("5+9=+6", "14 + ", "6");
      doTest("8+5=+4", "13 + ", "4");
      doTest("7+1=+3", "8 + ", "3");

      doTest("7+5=+", "12 + ", "12");
      doTest("4+3=+", "7 + ", "7");
      doTest("2+2=+", "4 + ", "4");
      doTest("8+8=+", "16 + ", "16");
      doTest("6+1=+", "7 + ", "7");

      doTest("3+1=+=", "", "8");
      doTest("5+5=+=", "", "20");
      doTest("8+3=+=", "", "22");
      doTest("4+8=+=", "", "24");
      doTest("1+4=+=", "", "10");

      doTest("5n+3=", "", "-2");
      doTest("1n+4=", "", "3");
      doTest("6n+2=", "", "-4");
      doTest("8n+7=", "", "-1");
      doTest("7n+6=", "", "-1");

      doTest("4+4n=", "", "0");
      doTest("2+7n=", "", "-5");
      doTest("8+3n=", "", "5");
      doTest("2+6n=", "", "-4");
      doTest("4+7n=", "", "-3");

      doTest("0.1+1=", "", "1,1");
      doTest("2.5+5=", "", "7,5");
      doTest("8.2+9=", "", "17,2");
      doTest("4.3+4=", "", "8,3");
      doTest("7.5+6=", "", "13,5");

      doTest("7+1.2=", "", "8,2");
      doTest("2+3.5=", "", "5,5");
      doTest("4+5.6=", "", "9,6");
      doTest("5+7.8=", "", "12,8");
      doTest("3+9.1=", "", "12,1");
   }

   @Test
   void subtractOperationTest() {
      doTest("2-2=", "", "0");
      doTest("7-3=", "", "4");
      doTest("1-8=", "", "-7");
      doTest("5-6=", "", "-1");
      doTest("3-9=", "", "-6");

      doTest("0-0=", "", "0");
      doTest("1-0=", "", "1");
      doTest("8-0=", "", "8");
      doTest("0-5=", "", "-5");
      doTest("0-3=", "", "-3");

      doTest("2-5", "2 - ", "5");
      doTest("5-3", "5 - ", "3");
      doTest("2-3", "2 - ", "3");
      doTest("2-8", "2 - ", "8");
      doTest("1-2", "1 - ", "2");

      doTest("0-0", "0 - ", "0");
      doTest("1-0", "1 - ", "0");
      doTest("5-0", "5 - ", "0");
      doTest("0-2", "0 - ", "2");
      doTest("0-6", "0 - ", "6");

      doTest("0-", "0 - ", "0");
      doTest("2-", "2 - ", "2");
      doTest("3-", "3 - ", "3");
      doTest("9-", "9 - ", "9");
      doTest("8-", "8 - ", "8");

      doTest("-1", "0 - ", "1");
      doTest("-5", "0 - ", "5");
      doTest("-9", "0 - ", "9");
      doTest("-7", "0 - ", "7");
      doTest("-3", "0 - ", "3");

      doTest("-", "0 - ", "0");

      doTest("1-=", "", "0");
      doTest("5-=", "", "0");
      doTest("3-=", "", "0");
      doTest("2-=", "", "0");
      doTest("7-=", "", "0");

      doTest("-7=", "", "-7");
      doTest("-2=", "", "-2");
      doTest("-5=", "", "-5");
      doTest("-9=", "", "-9");
      doTest("-1=", "", "-1");

      doTest("1-5-", "1 - 5 - ", "-4");
      doTest("2-9-", "2 - 9 - ", "-7");
      doTest("3-8-", "3 - 8 - ", "-5");
      doTest("4-7-", "4 - 7 - ", "-3");
      doTest("5-6-", "5 - 6 - ", "-1");

      doTest("2-3-=", "", "0");
      doTest("9-2-=", "", "0");
      doTest("5-7-=", "", "0");
      doTest("6-4-=", "", "0");
      doTest("7-6-=", "", "0");

      doTest("1-1-2=", "", "-2");
      doTest("6-2-2=", "", "2");
      doTest("1-7-3=", "", "-9");
      doTest("0-2-8=", "", "-10");
      doTest("5-9-3=", "", "-7");

      doTest("2-4=-5", "-2 - ", "5");
      doTest("3-3=-7", "0 - ", "7");
      doTest("5-9=-6", "-4 - ", "6");
      doTest("8-5=-4", "3 - ", "4");
      doTest("7-1=-3", "6 - ", "3");

      doTest("7-5=-", "2 - ", "2");
      doTest("4-3=-", "1 - ", "1");
      doTest("2-2=-", "0 - ", "0");
      doTest("8-8=-", "0 - ", "0");
      doTest("6-1=-", "5 - ", "5");

      doTest("3-1=-=", "", "0");
      doTest("5-5=-=", "", "0");
      doTest("8-3=-=", "", "0");
      doTest("4-8=-=", "", "0");
      doTest("1-4=-=", "", "0");

      doTest("5n-3=", "", "-8");
      doTest("1n-4=", "", "-5");
      doTest("6n-2=", "", "-8");
      doTest("8n-7=", "", "-15");
      doTest("7n-6=", "", "-13");

      doTest("4-4n=", "", "8");
      doTest("2-7n=", "", "9");
      doTest("8-3n=", "", "11");
      doTest("2-6n=", "", "8");
      doTest("4-7n=", "", "11");

      doTest("0.1-1=", "", "-0,9");
      doTest("2.5-5=", "", "-2,5");
      doTest("8.2-9=", "", "-0,8");
      doTest("4.3-4=", "", "0,3");
      doTest("7.5-6=", "", "1,5");

      doTest("7-1.2=", "", "5,8");
      doTest("2-3.5=", "", "-1,5");
      doTest("4-5.6=", "", "-1,6");
      doTest("5-7.8=", "", "-2,8");
      doTest("3-9.1=", "", "-6,1");
   }

   @Test
   void multiplyOperationTest() {
      doTest("2×2=", "", "4");
      doTest("7×3=", "", "21");
      doTest("1×8=", "", "8");
      doTest("5×6=", "", "30");
      doTest("3×9=", "", "27");

      doTest("0×0=", "", "0");
      doTest("1×0=", "", "0");
      doTest("8×0=", "", "0");
      doTest("0×5=", "", "0");
      doTest("0×3=", "", "0");

      doTest("2×5", "2 × ", "5");
      doTest("5×3", "5 × ", "3");
      doTest("2×3", "2 × ", "3");
      doTest("2×8", "2 × ", "8");
      doTest("1×2", "1 × ", "2");

      doTest("0×0", "0 × ", "0");
      doTest("1×0", "1 × ", "0");
      doTest("5×0", "5 × ", "0");
      doTest("0×2", "0 × ", "2");
      doTest("0×6", "0 × ", "6");

      doTest("0×", "0 × ", "0");
      doTest("2×", "2 × ", "2");
      doTest("3×", "3 × ", "3");
      doTest("9×", "9 × ", "9");
      doTest("8×", "8 × ", "8");

      doTest("×1", "0 × ", "1");
      doTest("×5", "0 × ", "5");
      doTest("×9", "0 × ", "9");
      doTest("×7", "0 × ", "7");
      doTest("×3", "0 × ", "3");

      doTest("×", "0 × ", "0");

      doTest("1×=", "", "1");
      doTest("5×=", "", "25");
      doTest("3×=", "", "9");
      doTest("2×=", "", "4");
      doTest("7×=", "", "49");

      doTest("×7=", "", "0");
      doTest("×2=", "", "0");
      doTest("×5=", "", "0");
      doTest("×9=", "", "0");
      doTest("×1=", "", "0");

      doTest("1×5×", "1 × 5 × ", "5");
      doTest("2×9×", "2 × 9 × ", "18");
      doTest("3×8×", "3 × 8 × ", "24");
      doTest("4×7×", "4 × 7 × ", "28");
      doTest("5×6×", "5 × 6 × ", "30");

      doTest("2×3×=", "", "36");
      doTest("9×2×=", "", "324");
      doTest("5×7×=", "", "1 225");
      doTest("6×4×=", "", "576");
      doTest("7×6×=", "", "1 764");

      doTest("1×1×2=", "", "2");
      doTest("6×2×2=", "", "24");
      doTest("1×7×3=", "", "21");
      doTest("0×2×8=", "", "0");
      doTest("5×9×3=", "", "135");

      doTest("2×4=×5", "8 × ", "5");
      doTest("3×3=×7", "9 × ", "7");
      doTest("5×9=×6", "45 × ", "6");
      doTest("8×5=×4", "40 × ", "4");
      doTest("7×1=×3", "7 × ", "3");

      doTest("7×5=×", "35 × ", "35");
      doTest("4×3=×", "12 × ", "12");
      doTest("2×2=×", "4 × ", "4");
      doTest("8×8=×", "64 × ", "64");
      doTest("6×1=×", "6 × ", "6");

      doTest("3×1=×=", "", "9");
      doTest("5×5=×=", "", "625");
      doTest("8×3=×=", "", "576");
      doTest("4×8=×=", "", "1 024");
      doTest("1×4=×=", "", "16");

      doTest("5n×3=", "", "-15");
      doTest("1n×4=", "", "-4");
      doTest("6n×2=", "", "-12");
      doTest("8n×7=", "", "-56");
      doTest("7n×6=", "", "-42");

      doTest("4×4n=", "", "-16");
      doTest("2×7n=", "", "-14");
      doTest("8×3n=", "", "-24");
      doTest("2×6n=", "", "-12");
      doTest("4×7n=", "", "-28");

      doTest("0.1×1=", "", "0,1");
      doTest("2.5×5=", "", "12,5");
      doTest("8.2×9=", "", "73,8");
      doTest("4.3×4=", "", "17,2");
      doTest("7.5×6=", "", "45");

      doTest("7×1.2=", "", "8,4");
      doTest("2×3.5=", "", "7");
      doTest("4×5.6=", "", "22,4");
      doTest("5×7.8=", "", "39");
      doTest("3×9.1=", "", "27,3");
   }

   @Test
   void divideOperationTest() {
      doTest("2÷2=", "", "1");
      doTest("7÷3=", "", "2,333333333333333");
      doTest("1÷8=", "", "0,125");
      doTest("5÷6=", "", "0,8333333333333333");
      doTest("3÷9=", "", "0,3333333333333333");

      doTest("0÷5=", "", "0");
      doTest("0÷3=", "", "0");

      doTest("2÷5", "2 ÷ ", "5");
      doTest("5÷3", "5 ÷ ", "3");
      doTest("2÷3", "2 ÷ ", "3");
      doTest("2÷8", "2 ÷ ", "8");
      doTest("1÷2", "1 ÷ ", "2");

      doTest("0÷0", "0 ÷ ", "0");
      doTest("1÷0", "1 ÷ ", "0");
      doTest("5÷0", "5 ÷ ", "0");
      doTest("0÷2", "0 ÷ ", "2");
      doTest("0÷6", "0 ÷ ", "6");

      doTest("0÷", "0 ÷ ", "0");
      doTest("2÷", "2 ÷ ", "2");
      doTest("3÷", "3 ÷ ", "3");
      doTest("9÷", "9 ÷ ", "9");
      doTest("8÷", "8 ÷ ", "8");

      doTest("÷1", "0 ÷ ", "1");
      doTest("÷5", "0 ÷ ", "5");
      doTest("÷9", "0 ÷ ", "9");
      doTest("÷7", "0 ÷ ", "7");
      doTest("÷3", "0 ÷ ", "3");

      doTest("÷", "0 ÷ ", "0");

      doTest("1÷=", "", "1");
      doTest("5÷=", "", "1");
      doTest("3÷=", "", "1");
      doTest("2÷=", "", "1");
      doTest("7÷=", "", "1");

      doTest("÷7=", "", "0");
      doTest("÷2=", "", "0");
      doTest("÷5=", "", "0");
      doTest("÷9=", "", "0");
      doTest("÷1=", "", "0");

      doTest("1÷5÷", "1 ÷ 5 ÷ ", "0,2");
      doTest("2÷9÷", "2 ÷ 9 ÷ ", "0,2222222222222222");
      doTest("3÷8÷", "3 ÷ 8 ÷ ", "0,375");
      doTest("4÷7÷", "4 ÷ 7 ÷ ", "0,5714285714285714");
      doTest("5÷6÷", "5 ÷ 6 ÷ ", "0,8333333333333333");

      doTest("2÷3÷=", "", "1");
      doTest("9÷2÷=", "", "1");
      doTest("5÷7÷=", "", "1");
      doTest("6÷4÷=", "", "1");
      doTest("7÷6÷=", "", "1");

      doTest("1÷1÷2=", "", "0,5");
      doTest("6÷2÷2=", "", "1,5");
      doTest("1÷7÷3=", "", "0,0476190476190476");
      doTest("0÷2÷8=", "", "0");
      doTest("5÷9÷3=", "", "0,1851851851851852");

      doTest("2÷4=÷5", "0,5 ÷ ", "5");
      doTest("3÷3=÷7", "1 ÷ ", "7");
      doTest("5÷9=÷6", "0,5555555555555556 ÷ ", "6");
      doTest("8÷5=÷4", "1,6 ÷ ", "4");
      doTest("7÷1=÷3", "7 ÷ ", "3");

      doTest("7÷5=÷", "1,4 ÷ ", "1,4");
      doTest("4÷3=÷", "1,333333333333333 ÷ ", "1,333333333333333");
      doTest("2÷2=÷", "1 ÷ ", "1");
      doTest("8÷8=÷", "1 ÷ ", "1");
      doTest("6÷1=÷", "6 ÷ ", "6");

      doTest("3÷1=÷=", "", "1");
      doTest("5÷5=÷=", "", "1");
      doTest("8÷3=÷=", "", "1");
      doTest("4÷8=÷=", "", "1");
      doTest("1÷4=÷=", "", "1");

      doTest("5n÷3=", "", "-1,666666666666667");
      doTest("1n÷4=", "", "-0,25");
      doTest("6n÷2=", "", "-3");
      doTest("8n÷7=", "", "-1,142857142857143");
      doTest("7n÷6=", "", "-1,166666666666667");

      doTest("4÷4n=", "", "-1");
      doTest("2÷7n=", "", "-0,2857142857142857");
      doTest("8÷3n=", "", "-2,666666666666667");
      doTest("2÷6n=", "", "-0,3333333333333333");
      doTest("4÷7n=", "", "-0,5714285714285714");

      doTest("0.1÷1=", "", "0,1");
      doTest("2.5÷5=", "", "0,5");
      doTest("8.2÷9=", "", "0,9111111111111111");
      doTest("4.3÷4=", "", "1,075");
      doTest("7.5÷6=", "", "1,25");

      doTest("7÷1.2=", "", "5,833333333333333");
      doTest("2÷3.5=", "", "0,5714285714285714");
      doTest("4÷5.6=", "", "0,7142857142857143");
      doTest("5÷7.8=", "", "0,641025641025641");
      doTest("3÷9.1=", "", "0,3296703296703297");
   }

   @Test
   void equalsTests() {
      doTest("=", "", "0");
      doTest("+=", "", "0");
      doTest("3=", "", "3");
      doTest("√=", "", "0");
      doTest("%=", "", "0");
      doTest("n=", "", "0");
      doTest("2+3=+++", "5 + ", "5");
      doTest("239×4=+-×÷", "956 ÷ ", "956");
      doTest("10+=", "", "20");
      doTest("10+=+=", "", "40");
      doTest("10+=+=+=", "", "80");
      doTest("7+3=1+", "1 + ", "1");
      doTest("2+3=4===", "", "13");
      doTest("1+2=4=", "", "6");
      doTest("1+3===", "", "10");
      doTest("289-102===", "", "-17");
      doTest("2×3===", "", "54");
      doTest("188÷2===", "", "23,5");
      doTest("5+3=", "", "8");

      doTest("4√=", "", "2");
      doTest("8 SQR =", "", "64");
      doTest("2 1/x =", "", "0,5");
      doTest("5+3= 1/x ", "1/(8) ", "0,125");
      doTest("5+3= 1/x =", "", "3,125");
      doTest("5+3= 1/x ==", "", "6,125");
      doTest("5+3= 1/x ===", "", "9,125");
      doTest("5+3= 1/x ===5=", "", "9,125");
      doTest("3=6+", "6 + ", "6");
      doTest("2=+", "2 + ", "2");
   }

   @Test
   void specialOperationsTests() {
      doTest("200+4% 1/x 1/x SQR √", "200 + √(sqr(1/(1/(8)))) ", "8");
      doTest("1÷3= 1/x ", "1/(0,3333333333333333) ","3");
      doTest("5+2√ SQR √√√1+", "5 + 1 + ", "6");
   }

   @Test
   void negateTest() {
      doTest("1n", "negate(1) ", "-1");
      doTest("5nn", "negate(negate(5)) ", "5");
      doTest("5+n", "5 + negate(5) ", "-5");
      doTest("5+n=", "", "0");
   }

   @Test
   void squareTest() {
      doTest("0 SQR ", "sqr(0) ", "0");
      doTest("1 SQR ", "sqr(1) ", "1");
      doTest("2 SQR ", "sqr(2) ", "4");
      doTest("2 SQR SQR ", "sqr(sqr(2)) ", "16");
      doTest("2 SQR SQR SQR", "sqr(sqr(sqr(2))) ", "256");
      doTest("2n SQR ", "sqr(negate(2)) ", "4");
      doTest("2√ SQR √ SQR √ SQR ", "sqr(√(sqr(√(sqr(√(2)))))) ", "2");
      doTest("8 SQR ", "sqr(8) ", "64");
      doTest("5 SQR +", "sqr(5) + ", "25");
      doTest("5n SQR +", "sqr(negate(5)) + ", "25");
      doTest("3 SQR +7", "sqr(3) + ", "7");
      doTest("3 SQR +2 SQR ", "sqr(3) + sqr(2) ", "4");
      doTest("3 SQR +2 SQR =", "", "13");
      doTest("3 SQR +7=", "", "16");
      doTest("5+ SQR SQR", "5 + sqr(sqr(5)) ", "625");
      doTest("5+ SQR SQR =", "", "630");
      doTest("2+3= SQR ", "sqr(5) ", "25");

      doTest("0.0000000000000001 SQR ", "sqr(0,0000000000000001) ", "1,e-32");
      doTest("0.0000000000000001 SQR SQR ", "sqr(sqr(0,0000000000000001)) ", "1,e-64");
      doTest("0.0000000000000001n= SQR ", "sqr(-0,0000000000000001) ", "1,e-32");
      doTest("0-0.0000000000000001= SQR ", "sqr(-0,0000000000000001) ", "1,e-32");
      doTest("9999999999999999 SQR ", "sqr(9999999999999999) ", "9,999999999999998e+31");
      doTest("9999999999999999 SQR SQR ", "sqr(sqr(9999999999999999)) ", "9,999999999999996e+63");
   }

   @Test
   void squareRootTest() {
      doTest("0√", "√(0) ", "0");
      doTest("4√", "√(4) ", "2");
      doTest("4√√", "√(√(4)) ", "1,414213562373095");
      doTest("4√√√", "√(√(√(4))) ", "1,189207115002721");
      doTest("4√√√=", "", "1,189207115002721");
      doTest("3+4√=", "", "5");
      doTest("4+√", "4 + √(4) ", "2");
      doTest("4+1+1+1+√", "4 + 1 + 1 + 1 + √(7) ","2,645751311064591");
      doTest("121√", "√(121) ", "11");
      doTest("456√", "√(456) ", "21,35415650406262");
      doTest("2875√", "√(2875) ", "53,61902647381804");
      doTest("1785√", "√(1785) ", "42,24926034855522");
      doTest("2134√", "√(2134) ", "46,19523784980439");
      doTest("4+5=√", "√(9) ", "3");
      doTest("4+5=√=", "", "8");

      doTest("0.0000000000000001√", "√(0,0000000000000001) ", "0,00000001");
      doTest("0.0000000000000001√√", "√(√(0,0000000000000001)) ", "0,0001");

      doTest("9999999999999999√", "√(9999999999999999) ", "100 000 000");
   }

   @Test
   void divideByTest() {
      doTest("1 1/x ", "1/(1) ", "1");
      doTest("2 1/x ", "1/(2) ", "0,5");
      doTest("10 1/x ", "1/(10) ", "0,1");
      doTest("5 1/x +", "1/(5) + ", "0,2");
      doTest("10+ 1/x ", "10 + 1/(10) ", "0,1");
      doTest("10+12= 1/x", "1/(22) ", "0,0454545454545454");
      doTest("3 1/x 1/x 1/x 1/x 1/x 1/x", "1/(1/(1/(1/(1/(1/(3)))))) ", "3");
      doTest("1÷3= 1/x ", "1/(0,3333333333333333) ", "3");
      doTest("1000000000000000- 1/x", "1000000000000000 - 1/(1000000000000000) ", "0,000000000000001");
      doTest("1000000000000000×=- 1/x", "1,e+30 - 1/(1,e+30) ", "1,e-30");
      doTest("1000000000000000×=====- 1/x", "1,e+90 - 1/(1,e+90) ", "1,e-90");
   }

   @Test
   void percentTest() {
      doTest("2%", "0 ", "0");
      doTest("168%", "0 ", "0");
      doTest("6n%", "0 ", "0");
      doTest("7%%", "0 ", "0");
      doTest("10%%%%=", "", "0");
      doTest("200+2%", "200 + 4 ", "4");
      doTest("200+2%=", "", "204");
      doTest("200+2%=%", "416.16 ", "416,16");
      doTest("200+25%%%%%%%%%", "200 + 12800 ", "12 800");
      doTest("200+25%%%%%%%%%=", "", "13 000");
      doTest("300n+15%=", "", "-345");
      doTest("245+63n%=", "", "90,65");
      doTest("199+1=", "", "200");
      doTest("199+1=%", "400 ", "400");
      doTest("199+1=%%", "800 ", "800");
      doTest("199+1=%%%", "1600 ", "1 600");
      doTest("5+%", "5 + 0.25 ", "0,25");
   }

   @Test
   void backspaceTest() {
      doTest("2 SQR SQR SQR <<<<<<<<=", "", "256");
      doTest("70÷7=<<<", "", "10");
      doTest("1234567890<<<<<<<<<<<<<<<<<<<<<=", "", "0");
      doTest("<<<<2√ SQR =", "", "2");
      doTest("2+3=<<<<", "", "5");

      doTest("<", "", "0");
      doTest(".", "", "0,");
      doTest("...", "", "0,");
      doTest(".<", "", "0");
      doTest("...<<<", "", "0");
      doTest("...<", "", "0");
      doTest("<.", "", "0,");
      doTest("<...", "", "0,");

      doTest("<0", "", "0");
      doTest("0<", "", "0");
      doTest("000000<<<<<", "",  "0");
      doTest("0.0001<", "", "0,000");
      doTest("0.0<", "", "0,");
      doTest("1.0<", "", "1,");
      doTest("1.01<", "", "1,0");
      doTest("12.0<", "", "12,");
      doTest("12.0<<", "","12");
      doTest("12.0<<<", "", "1");
      doTest("12.0<<<<", "", "0");
      doTest("<<<1234.12345", "", "1 234,12345");
      doTest("1234.12345<<<", "", "1 234,12");
      doTest("1234.12345<<<<", "", "1 234,1");
      doTest("1234.12345<<<<<", "", "1 234,");
      doTest("1234.12345<<<<<<", "", "1 234");
      doTest("1234.12345<<<<<<<", "", "123");

      doTest("1000000000000000.", "", "1 000 000 000 000 000,");
      doTest("1000000000000000.<", "", "1 000 000 000 000 000");
      doTest("1000000000000000.<.00", "", "1 000 000 000 000 000,");
      doTest("1000000000000000.<.10", "", "1 000 000 000 000 000,");
      doTest("1000000000000000.<0", "", "1 000 000 000 000 000");
   }

   @Test
   void clear() {
      doTest("2+2×2-6×3-10 C", "", "0");
      doTest("2+5÷2 C C C C C C C C C", "", "0");
      doTest("5 SQR SQR SQR SQR SQR SQR √√ SQR SQR SQR SQR SQR √ SQR SQR SQR C C", "", "0");

      doTest("85 CE", "", "0");
      doTest("8+2 CE", "8 + ", "0");
      doTest("6- CE", "6 - ", "0");
   }

   @Test
   void hiddenOperand() {
      doTest("4+n", "4 + negate(4) ", "-4");
      doTest("4+n=", "", "0");
      doTest("÷×-+", "0 + ", "0");
      doTest("-9√=", "", "-3");
      doTest("8+5-√=", "", "9,394448724536011");
   }

   @Test
   void testRoundingMode() {
      doTest("0.0000000000000001+1=", "", "1");
      doTest("1÷3×3=", "", "1");
      doTest("1÷3×3-1", "1 ÷ 3 × 3 - ", "1");
      doTest("0.0111111111111111×0.1=", "", "0,0011111111111111");
      doTest("0.0111111111111111×0.1==", "", "1,11111111111111e-4");
      doTest("0.0111111111111111×0.1===", "", "1,11111111111111e-5");
      doTest("1÷3×3-1=", "", "0");
      doTest("2.0000000000000001+1========", "", "10");
      doTest("0.1×================", "", "1,e-17");
      doTest("0.9×=================================================================", "", "9,550049507968252e-4");
      doTest("9999999999999999+2=", "", "1,e+16");
      doTest("9999999999999999×2=", "", "2,e+16");
      doTest("9999999999999999×8=", "", "7,999999999999999e+16");
      doTest("9999999999999999×8==", "", "6,399999999999999e+17");
      doTest("9999999999999999×8===", "", "5,119999999999999e+18");
      doTest("9999999999999999×8====", "", "4,096e+19");
      doTest("9999999999999999×6=", "", "5,999999999999999e+16");
      doTest("9999999999999999×6==", "", "3,6e+17");
      doTest("9999999999999999×6===", "", "2,16e+18");
      doTest("9999999999999999×6====", "", "1,296e+19");
      doTest("9999999999999999×6=====", "", "7,775999999999999e+19");
      doTest("9999999999999999+6=", "", "1,e+16");
      doTest("9999999999999999+7=", "", "1,000000000000001e+16");
      doTest("9999999999999999 1/x +1=", "", "1");
      doTest("9999999999999999 1/x =", "", "1,e-16");
      doTest("9999999999999999 1/x +=", "", "2,e-16");
      doTest("9999999999999999 1/x +==", "", "3,e-16");
      doTest("9999999999999999 1/x +===", "", "4,e-16");
      doTest("9999999999999999 1/x +====", "", "5,000000000000001e-16");
      doTest("2.000000000000001+1=", "", "3,000000000000001");
      doTest("2.000000000000001+2=", "", "4,000000000000001");
      doTest("2.000000000000001+3=", "", "5,000000000000001");
      doTest("2.000000000000001+4=", "", "6,000000000000001");
      doTest("2.000000000000001+8=", "", "10");

      doTest("0.0000000000000001+=", "", "0,0000000000000002");
      doTest("0.0000000000000001-=", "", "0");
      doTest("1÷7×7-1=", "", "0");
      doTest("1÷7×1000000000000000×7-1000000000000000=", "", "0");
      doTest("1÷3÷7÷11÷13÷17×1000000000000000×3×7×11×13×17-1000000000000000=", "", "0");
      doTest("5√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√√", null, "1,000000000000002");
      doTest("1÷3×0.0000000000000001×0.00000000001×1000000000000000×10000000000000×3=", "", "10");
      doTest("0.9999999999999999×999999999999999.1=", "", "999 999 999 999 999");
      doTest("0.9999999999999999×999999999999999.3=", "", "999 999 999 999 999,2");
      doTest("0.9999999999999999×999999999999999.5=", "", "999 999 999 999 999,4");
      doTest("0.9999999999999999×999999999999999.7=", "", "999 999 999 999 999,6");
      doTest("0.9999999999999999×99999999999999.11=", "", "99 999 999 999 999,1");

      doTest("10÷3==×1000000000000000========", "", "1,111111111111111e+120");
   }

   @Test
   void buildOperandTest() {
      doTest("1", "", "1");
      doTest("2", "", "2");
      doTest("3", "", "3");
      doTest("4", "", "4");
      doTest("5", "", "5");
      doTest("6", "", "6");
      doTest("7", "", "7");
      doTest("8", "", "8");
      doTest("9", "", "9");

      doTest("0000000000000000000000000000000000000001", "", "1");
      doTest("01010111101010101000011", "", "1 010 111 101 010 101");
      doTest("123456789", "", "123 456 789");
      doTest("1000000000000000000", "", "1 000 000 000 000 000");
      doTest("1000000000000000000.", "", "1 000 000 000 000 000,");
      doTest("9999999999999999999.", "", "9 999 999 999 999 999,");
      doTest("1234567890123456789", "", "1 234 567 890 123 456");

      doTest("3.0", "", "3,0");
      doTest("3.00", "", "3,00");
      doTest("0.00000000000000000", "", "0,0000000000000000");
      doTest("3.00000000000000000", "", "3,000000000000000");
      doTest("3.000000000000000001", "", "3,000000000000000");
      doTest("10.000000000000000001", "", "10,00000000000000");
      doTest("100.000000000000000001", "", "100,0000000000000");
      doTest("1000.000000000000000001", "", "1 000,000000000000");
      doTest("100000000000000.000000000000000001", "", "100 000 000 000 000,0");
      doTest("1000000000000000.000000000000000001", "", "1 000 000 000 000 000,");
   }

   @Test
   void historyTest() {
      doTest("0.0000000000000001+", "0,0000000000000001 + ", "0,0000000000000001");
      doTest("0.0000000000000001+1", "0,0000000000000001 + ", "1");
      doTest("0.0000000000000001+1=", "", "1");
      doTest("0.0000000000000001+1=+", "1 + ", "1");
      doTest("0.0000000000000001+1=+=+", "2 + ", "2");
      doTest("0.0000000000000001+1=+=+=+", "4 + ", "4");
      doTest("0.0000000000000001+1=+=+=+=+", "8,000000000000001 + ", "8,000000000000001");

      doTest("2+5 SQR ", "2 + sqr(5) ", "25");
      doTest("1.00001√√√", "√(√(√(1,00001))) ", "1,000001249994531");
   }

   @Test
   void memoryTest() {
      // takes from operand
      doTest("4 M+ M+ MR ", "", "8");
      doTest("1 M+ M+ M+ M+ × MR =", "", "4");
      doTest("1 M- M- × MR =", "", "-2");
      doTest("1 M- M+ M- M+ MR =", "", "0");
      doTest("M+ M+ M+ 1 + MR =", "", "1");

      // takes from result
      doTest("1+2+3+4+5+ M+ MR =", "", "30");
      doTest("2+2= M+ M+ M+ M+ MR + 0=", "", "16");
      doTest("0 + 20 M- M- M- M- M- =- MR =", "", "120");


      doTest("0,0000000000000001 SQR SQR SQR SQR SQR SQR M+ √√√√ SQR SQR SQR SQR M- MR ", null, "0");
      doTest("0,0000000000000001 SQR SQR SQR SQR SQR SQR M+ √√√√ SQR SQR SQR SQR M- MR =", null, "0");
   }

   @Test
   void checkExceptions() {
      // overflow
      doTest("1000000000000000 SQR SQR SQR SQR SQR SQR SQR SQR SQR SQR ", "sqr(sqr(sqr(sqr(sqr(sqr(sqr(sqr(sqr(1000000000000000))))))))) ", "Overflow");
      doTest("0.0000000000000001 SQR SQR SQR SQR SQR SQR SQR SQR SQR SQR ", "sqr(sqr(sqr(sqr(sqr(sqr(sqr(sqr(sqr(0,0000000000000001))))))))) ", "Overflow");

      // undefined
      doTest("0÷0=", "0 ÷ ", "Result is undefined");
      doTest("0÷0+", "0 ÷ ", "Result is undefined");

      // divide by zero
      doTest("1÷0=", "1 ÷ ", "Cannot divide by zero");
      doTest("5÷0=", "5 ÷ ", "Cannot divide by zero");
      doTest("0.0000000000000001÷0=", "0,0000000000000001 ÷ ", "Cannot divide by zero");
      doTest(" 1/x ", "", "Cannot divide by zero");
      doTest("0 1/x ", "", "Cannot divide by zero");
      doTest("8÷0+", "8 ÷ ", "Cannot divide by zero");
      doTest("8÷0=", "8 ÷ ", "Cannot divide by zero");

      // invalid input
      doTest("5n√", "negate(5) ", "Invalid input");
      doTest("55n√", "negate(55) ", "Invalid input");
      doTest("50-45-500√=√", "", "Invalid input");
      doTest("0.4565468n√", "negate(0,4565468) ", "Invalid input");
      doTest("-0.57894=√", "", "Invalid input");
   }
}
